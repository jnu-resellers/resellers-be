name: testAndDeploy

on:
  push:
    branches: [ "develop" ]

jobs:
  build:

    runs-on: ubuntu-22.04
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle Wrapper
        run: ./gradlew build

      - name: create env file
        run: |
          touch .env
          echo "${{ secrets.ENV_VARS }}" >> .env

      - name: Send docker-compose.yml
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: ./docker-compose.yml
          target: /home/ubuntu/docker-compose.yml

      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKER_HUB_USER_NAME }}/resellers-dev:latest .

      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USER_NAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: docker Hub Push
        run: docker push ${{ secrets.DOCKER_HUB_USER_NAME }}/gaebaljip-dv:latest

      - name: SSH Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker-compose -f /home/ubuntu/docker-compose.yml down
            sudo docker pull ${{ secrets.DOCKER_HUB_USER_NAME }}/resellers-dev:latest
            sudo docker-compose -f /home/ubuntu/docker-compose.yml up --build --abort-on-container-exit
            sudo docker image prune -a -f
